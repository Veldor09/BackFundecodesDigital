generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoTransaccion {
  ingreso
  egreso
}

model Project {
  id          Int                @id @default(autoincrement())
  title       String
  slug        String             @unique
  summary     String?
  content     String?
  coverUrl    String?
  published   Boolean            @default(false)
  publishedAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  area        String
  category    String
  place       String
  status      ProjectStatus      @default(EN_PROCESO)
  documents   ProjectDocument[]
  images      ProjectImage[]
  assignments ProjectVolunteer[]

  presupuestos        Presupuesto[]
  transacciones       Transaccion[]
  documentosContables DocumentoContable[]

  billingRequests    BillingRequest[]
  billingInvoices    BillingInvoice[]
  programAllocations ProgramAllocation[]
  payments           Payment[]
  receipts           Receipt[]

  @@unique([title, place, area])
  @@index([status])
  @@index([updatedAt])
}

model ProjectImage {
  id        Int      @id @default(autoincrement())
  projectId Int
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([order])
}

model ProjectDocument {
  id        Int      @id @default(autoincrement())
  projectId Int
  url       String
  name      String
  mimeType  String?
  createdAt DateTime @default(now())
  size      Int?
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String?
  coverUrl    String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model VolunteerForm {
  id             Int      @id @default(autoincrement())
  nombre         String
  email          String
  telefono       String
  disponibilidad String
  mensaje        String
  createdAt      DateTime @default(now())
}

model InformationalPage {
  id            String   @id @default("default")
  vision        Json
  mission       Json
  collaborators Json
  comments      Json
  updatedAt     DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  approved  Boolean  @default(false)

  roles              UserRole[]
  emailLogs          EmailLog[]
  passwordChangeLogs PasswordChangeLog[]
  auditorias         Auditoria[]

  solicitudHistorial SolicitudHistorial[]
  solicitudes        SolicitudCompra[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       UserRole[]
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id          Int     @id @default(autoincrement())
  key         String  @unique
  description String?
  roles       Role[]  @relation("PermissionToRole")
}

model UserRole {
  id     Int @id @default(autoincrement())
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Collaborator {
  id                    Int               @id @default(autoincrement())
  nombreCompleto        String            @map("nombre_completo")
  correo                String            @unique @db.VarChar(160)
  cedula                String            @unique @db.VarChar(25)
  fechaNacimiento       DateTime?         @map("fecha_nacimiento")
  telefono              String?           @db.VarChar(25)
  rol                   ColaboradorRol    @default(colaboradorproyecto)
  passwordHash          String            @map("password_hash") @db.VarChar(255)
  estado                ColaboradorEstado @default(ACTIVO)
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  passwordUpdatedAt     DateTime?         @map("password_updated_at")
  tempPasswordExpiresAt DateTime?         @map("temp_password_expires_at")

  @@map("colaborador")
}

model EmailLog {
  id        Int      @id @default(autoincrement())
  to        String
  subject   String
  template  String?
  payload   Json?
  status    String
  attempt   Int      @default(0)
  error     String?  @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model Voluntario {
  id              Int                @id @default(autoincrement())
  tipoDocumento   String             @map("tipo_documento")
  numeroDocumento String             @unique @map("numero_documento") @db.VarChar(25)
  nombreCompleto  String             @map("nombre_completo")
  email           String             @unique @db.VarChar(160)
  telefono        String?            @db.VarChar(25)
  fechaNacimiento DateTime?          @map("fecha_nacimiento")
  fechaIngreso    DateTime           @default(now()) @map("fecha_ingreso")
  estado          ColaboradorEstado  @default(ACTIVO)
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  assignments     ProjectVolunteer[]
  sanciones       Sancion[]

  @@map("voluntario")
}

enum ProjectStatus {
  EN_PROCESO
  FINALIZADO
  PAUSADO
}


enum ColaboradorRol {
  admin
  colaboradorfactura
  colaboradorvoluntariado
  colaboradorproyecto
  colaboradorcontabilidad
}


enum ColaboradorEstado {
  ACTIVO
  INACTIVO
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  RETRYING
}

enum PasswordChangeType {
  RESET
  MANUAL
  INVITE_SET
}

model PasswordChangeLog {
  id        Int                @id @default(autoincrement())
  userId    Int
  user      User               @relation(fields: [userId], references: [id])
  ip        String?
  type      PasswordChangeType @default(RESET)
  createdAt DateTime           @default(now())

  @@index([userId, createdAt])
}

model ProjectVolunteer {
  projectId    Int
  voluntarioId Int
  assignedAt   DateTime @default(now())

  project    Project    @relation(fields: [projectId], references: [id])
  voluntario Voluntario @relation(fields: [voluntarioId], references: [id])

  @@id([projectId, voluntarioId])
  @@map("project_volunteer")
}

enum SancionTipo {
  LEVE
  GRAVE
  MUY_GRAVE
  EXTREMADAMENTE_GRAVE
}

enum SancionEstado {
  ACTIVA
  EXPIRADA
  REVOCADA
}

model Sancion {
  id               Int           @id @default(autoincrement())
  voluntarioId     Int
  tipo             SancionTipo
  motivo           String
  descripcion      String?
  fechaInicio      DateTime
  fechaVencimiento DateTime?
  estado           SancionEstado @default(ACTIVA)
  creadaPor        String?
  revocadaPor      String?
  fechaRevocacion  DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  voluntario Voluntario @relation(fields: [voluntarioId], references: [id])

  @@index([voluntarioId])
  @@index([estado])
}

enum EstadoContadora {
  PENDIENTE
  VALIDADA
  DEVUELTA
}

enum EstadoDirector {
  PENDIENTE
  APROBADA
  RECHAZADA
}

model SolicitudCompra {
  id                  Int                  @id @default(autoincrement())
  titulo              String
  descripcion         String
  archivos            String[]
  estado              String               @default("PENDIENTE")
  estadoContadora     EstadoContadora      @default(PENDIENTE)
  estadoDirector      EstadoDirector       @default(PENDIENTE)
  comentarioContadora String?
  comentarioDirector  String?
  usuarioId           Int?
  usuario             User?                @relation(fields: [usuarioId], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  historial           SolicitudHistorial[]
}

model SolicitudHistorial {
  id             Int      @id @default(autoincrement())
  solicitudId    Int
  estadoAnterior String
  estadoNuevo    String
  createdAt      DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  solicitud SolicitudCompra @relation(fields: [solicitudId], references: [id], onDelete: Cascade)
}

model Presupuesto {
  id             String   @id @default(cuid())
  projectId      Int
  proyecto       String // t√≠tulo legible del proyecto
  mes            Int // 1..12
  anio           Int
  montoAsignado  Decimal  @db.Decimal(16, 2)
  montoEjecutado Decimal  @db.Decimal(16, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId, anio, mes])
}

model Transaccion {
  id          String          @id @default(cuid())
  projectId   Int
  proyecto    String
  fecha       DateTime
  tipo        TipoTransaccion
  categoria   String
  descripcion String
  monto       Decimal         @db.Decimal(16, 2)


  moneda      Currency @default(CRC)

  createdAt   DateTime        @default(now())

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId, fecha, tipo])
}

model DocumentoContable {
  id        String   @id @default(cuid())
  projectId Int
  proyecto  String
  mes       Int
  anio      Int
  nombre    String
  tipoMime  String
  bytes     Int
  url       String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId, anio, mes])
}

// ===== Facturaci√≥n =====
enum Currency {
  CRC
  USD
  EUR
}

enum BillingRequestStatus {
  PENDING
  VALIDATED
  APPROVED
  REJECTED
  PAID
}

model BillingRequest {
  id              Int                  @id @default(autoincrement())
  amount          Decimal              @db.Decimal(16, 2)
  concept         String
  projectId       Int
  status          BillingRequestStatus @default(PENDING)
  createdBy       String?
  draftInvoiceUrl String?
  history         Json?

  // 1:1 inversa (FK en BillingInvoice.requestId)
  invoice BillingInvoice?

  project  Project   @relation(fields: [projectId], references: [id])
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model BillingInvoice {
  id        String   @id @default(cuid())
  requestId Int      @unique
  projectId Int
  number    String
  date      DateTime
  total     Decimal  @db.Decimal(16, 2)
  currency  Currency
  url       String?
  mime      String?
  bytes     Int?
  isValid   Boolean  @default(false)
  createdAt DateTime @default(now())

  request BillingRequest @relation(fields: [requestId], references: [id])
  project Project        @relation(fields: [projectId], references: [id])

  @@index([projectId, date])
}

model ProgramAllocation {
  id        String   @id @default(cuid())
  projectId Int
  concept   String
  amount    Decimal  @db.Decimal(16, 2)
  date      DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId, date])
}

model Payment {
  id        String   @id @default(cuid())
  requestId Int
  projectId Int
  amount    Decimal  @db.Decimal(16, 2)
  currency  Currency
  reference String
  date      DateTime

  project  Project        @relation(fields: [projectId], references: [id])
  request  BillingRequest @relation(fields: [requestId], references: [id])
  receipts Receipt[]

  @@index([projectId, date])
}

model Receipt {
  id         String   @id @default(cuid())
  projectId  Int
  paymentId  String?
  url        String
  mime       String
  bytes      Int
  filename   String
  uploadedAt DateTime @default(now())

  project Project  @relation(fields: [projectId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([projectId, uploadedAt])
}

model Auditoria {
  id        Int      @id @default(autoincrement())
  userId    Int?
  accion    String
  detalle   String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    String
  text      String
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
