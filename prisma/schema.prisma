// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  EN_PROCESO
  FINALIZADO
  PAUSADO
}

model Project {
  id       Int     @id @default(autoincrement())
  title    String
  slug     String  @unique
  summary  String?
  content  String?
  coverUrl String?

  // NOT NULL
  category String
  place    String
  area     String

  status ProjectStatus @default(EN_PROCESO)

  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  images    ProjectImage[]
  documents ProjectDocument[]

  /// combinación única solicitada
  @@unique([title, place, area])
  @@index([status])
  @@index([updatedAt])
}

model ProjectImage {
  id        Int      @id @default(autoincrement())
  projectId Int
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectId])
  @@index([order])
}

model ProjectDocument {
  id        Int      @id @default(autoincrement())
  projectId Int
  url       String
  name      String
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectId])
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String?
  coverUrl    String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Volunteer {
  id             Int      @id @default(autoincrement())
  nombre         String
  email          String
  telefono       String
  disponibilidad String
  mensaje        String
  createdAt      DateTime @default(now())
}

model InformationalPage {
  id            String   @id @default("default") // Solo una fila
  vision        Json // { title, content, imageUrl }
  mission       Json // { title, content, imageUrl }
  collaborators Json // Array de Collaborator
  comments      Json // Array de CommentItem
  updatedAt     DateTime @updatedAt
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String
  roles     UserRole[]
  verified  Boolean    @default(false)
  approved  Boolean    @default(false) // bloquear login si la cuenta no está aprobada
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]

  // Relación implícita M:N con permisos
  permissions Permission[]
}

model Permission {
  id          Int     @id @default(autoincrement())
  key         String  @unique // ej: "users.manage", "roles.manage", "projects.update"
  description String?

  // Relación implícita M:N con roles
  roles Role[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([userId, roleId]) // evita duplicar el mismo rol para un usuario
}
